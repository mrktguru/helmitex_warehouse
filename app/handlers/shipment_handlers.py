"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import finished_product_service, stock_service
from app.logger import get_logger

logger = get_logger("shipment_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SHIPMENT_SELECT_PRODUCT, SHIPMENT_ENTER_QUANTITY, SHIPMENT_ENTER_DESTINATION = range(3)


def get_back_to_main_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])


# ============================================================================
# –û–¢–ì–†–£–ó–ö–ê - –ù–ê–ß–ê–õ–û
# ============================================================================

async def shipment_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –æ—Ç–≥—Ä—É–∑–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        products = finished_product_service.get_finished_products(db)
        available_products = [p for p in products if p.stock_quantity > 0]
        
        if not available_products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        keyboard = []
        for product in available_products:
            keyboard.append([
                InlineKeyboardButton(
                    f"üì¶ {product.name} ({product.package_type} {product.package_weight}–∫–≥) "
                    f"- {int(product.stock_quantity)} —à—Ç",
                    callback_data=f"ship_prod_{product.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            "üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return SHIPMENT_SELECT_PRODUCT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shipment_menu_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê
# ============================================================================

async def shipment_enter_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    product_id = int(query.data.split("_")[-1])
    context.user_data["shipment_product_id"] = product_id
    
    db = SessionLocal()
    try:
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        
        await query.edit_message_text(
            f"üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
            f"–ü—Ä–æ–¥—É–∫—Ü–∏—è: *{product.category.name} / {product.name}*\n"
            f"–¢–∞—Ä–∞: {product.package_type} {product.package_weight}–∫–≥\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: *{int(product.stock_quantity)} —à—Ç*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ (—à—Ç):",
            parse_mode="Markdown"
        )
        
        return SHIPMENT_ENTER_QUANTITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shipment_enter_quantity_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–ì–†–£–ó–ö–ò
# ============================================================================

async def shipment_enter_destination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏."""
    try:
        quantity = int(update.message.text.strip())
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return SHIPMENT_ENTER_QUANTITY
        
        context.user_data["shipment_quantity"] = quantity
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        db = SessionLocal()
        try:
            product_id = context.user_data["shipment_product_id"]
            product = finished_product_service.get_finished_product_by_id(db, product_id)
            
            if quantity > product.stock_quantity:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(product.stock_quantity)} —à—Ç\n"
                    f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {quantity} —à—Ç\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                    reply_markup=get_back_to_main_button()
                )
                return SHIPMENT_ENTER_QUANTITY
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üõí Wildberries", callback_data="ship_dest_Wildberries")],
                [InlineKeyboardButton("üõí Ozon", callback_data="ship_dest_Ozon")],
                [InlineKeyboardButton("üõí –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", callback_data="ship_dest_YandexMarket")],
                [InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="ship_dest_custom")],
                [InlineKeyboardButton("‚û°Ô∏è –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è", callback_data="ship_dest_none")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
                f"–ü—Ä–æ–¥—É–∫—Ü–∏—è: *{product.name}*\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
            return SHIPMENT_ENTER_DESTINATION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_back_to_main_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):"
        )
        return SHIPMENT_ENTER_QUANTITY


# ============================================================================
# –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ì–†–£–ó–ö–ò
# ============================================================================

async def shipment_save_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–≤—ã–±–æ—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫)."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if query.data == "ship_dest_custom":
        await query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Wildberries, Ozon, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞):"
        )
        return SHIPMENT_ENTER_DESTINATION
    
    if query.data == "ship_dest_none":
        destination = None
    else:
        destination = query.data.replace("ship_dest_", "")
    
    await shipment_save_final(update, context, destination)
    return ConversationHandler.END


async def shipment_save_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é)."""
    destination = update.message.text.strip()
    await shipment_save_final(update, context, destination)
    return ConversationHandler.END


async def shipment_save_final(update: Update, context: ContextTypes.DEFAULT_TYPE, destination: str):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏."""
    product_id = context.user_data["shipment_product_id"]
    quantity = context.user_data["shipment_quantity"]
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –æ—Ç–≥—Ä—É–∑–∫–∏
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        old_stock = product.stock_quantity
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
        shipment = stock_service.create_shipment(
            db,
            finished_product_id=product_id,
            quantity=quantity,
            operator_id=user_id,
            destination=destination
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        
        destination_text = f"‚Üí *{destination}*" if destination else ""
        
        text = (
            f"‚úÖ *–û—Ç–≥—Ä—É–∑–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n"
            f"üì¶ *{product.category.name} / {product.name}*\n"
            f"   {product.package_type} {product.package_weight}–∫–≥\n\n"
            f"üöö –û—Ç–≥—Ä—É–∂–µ–Ω–æ: *{quantity} —à—Ç* {destination_text}\n"
            f"üìä –ë—ã–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {int(old_stock)} —à—Ç\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: *{int(product.stock_quantity)} —à—Ç*\n\n"
            f"üìÖ –î–∞—Ç–∞: {shipment.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
        
        logger.info(
            f"–û—Ç–≥—Ä—É–∑–∫–∞: {product.name} {quantity} —à—Ç ‚Üí {destination or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} "
            f"(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})"
        )# –§–∞–π–ª 17: `app/handlers/shipment_handlers.py` (–ù–û–í–´–ô - –û–¢–ì–†–£–ó–ö–ê)

```python
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import finished_product_service, stock_service
from app.logger import get_logger

logger = get_logger("shipment_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SHIPMENT_SELECT_PRODUCT, SHIPMENT_ENTER_QUANTITY, SHIPMENT_ENTER_DESTINATION = range(3)


def get_back_to_main_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])


# ============================================================================
# –û–¢–ì–†–£–ó–ö–ê - –ù–ê–ß–ê–õ–û
# ============================================================================

async def shipment_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –æ—Ç–≥—Ä—É–∑–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        products = finished_product_service.get_finished_products(db)
        available_products = [p for p in products if p.stock_quantity > 0]
        
        if not available_products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        keyboard = []
        for product in available_products:
            keyboard.append([
                InlineKeyboardButton(
                    f"üì¶ {product.name} ({product.package_type} {product.package_weight}–∫–≥) "
                    f"- {int(product.stock_quantity)} —à—Ç",
                    callback_data=f"ship_prod_{product.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            "üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return SHIPMENT_SELECT_PRODUCT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shipment_menu_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê
# ============================================================================

async def shipment_enter_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    product_id = int(query.data.split("_")[-1])
    context.user_data["shipment_product_id"] = product_id
    
    db = SessionLocal()
    try:
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        
        await query.edit_message_text(
            f"üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
            f"–ü—Ä–æ–¥—É–∫—Ü–∏—è: *{product.category.name} / {product.name}*\n"
            f"–¢–∞—Ä–∞: {product.package_type} {product.package_weight}–∫–≥\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: *{int(product.stock_quantity)} —à—Ç*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ (—à—Ç):",
            parse_mode="Markdown"
        )
        
        return SHIPMENT_ENTER_QUANTITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shipment_enter_quantity_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–ì–†–£–ó–ö–ò
# ============================================================================

async def shipment_enter_destination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏."""
    try:
        quantity = int(update.message.text.strip())
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return SHIPMENT_ENTER_QUANTITY
        
        context.user_data["shipment_quantity"] = quantity
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üõí Wildberries", callback_data="ship_dest_Wildberries")],
            [InlineKeyboardButton("üõí Ozon", callback_data="ship_dest_Ozon")],
            [InlineKeyboardButton("üõí –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", callback_data="ship_dest_YandexMarket")],
            [InlineKeyboardButton("üìù –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="ship_dest_custom")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ship_dest_skip")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            f"üöö *–û—Ç–≥—Ä—É–∑–∫–∞*\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç*\n\n"
            f"–ö—É–¥–∞ –æ—Ç–≥—Ä—É–∂–∞–µ–º?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return SHIPMENT_ENTER_DESTINATION
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):"
        )
        return SHIPMENT_ENTER_QUANTITY


# ============================================================================
# –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ì–†–£–ó–ö–ò
# ============================================================================

async def shipment_save_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–≤—ã–±–æ—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫)."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if query.data == "ship_dest_skip":
        destination = None
    elif query.data == "ship_dest_custom":
        await query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:"
        )
        return SHIPMENT_ENTER_DESTINATION
    else:
        destination = query.data.split("_")[-1]
    
    await shipment_complete(update, context, destination)
    return ConversationHandler.END


async def shipment_save_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º)."""
    destination = update.message.text.strip()
    await shipment_complete(update, context, destination)
    return ConversationHandler.END


async def shipment_complete(update: Update, context: ContextTypes.DEFAULT_TYPE, destination: str = None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏."""
    product_id = context.user_data["shipment_product_id"]
    quantity = context.user_data["shipment_quantity"]
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –æ—Ç–≥—Ä—É–∑–∫–∏
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        old_stock = product.stock_quantity
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        if quantity > old_stock:
            error_text = (
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {quantity} —à—Ç\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(old_stock)} —à—Ç"
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=get_back_to_main_button()
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=get_back_to_main_button()
                )
            
            context.user_data.clear()
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
        shipment = stock_service.create_shipment(
            db,
            finished_product_id=product_id,
            quantity=quantity,
            operator_id=user_id,
            destination=destination
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        product = finished_product_service.get_finished_product_by_id(db, product_id)
        
        dest_text = f"‚Üí *{destination}*" if destination else ""
        
        result_text = (
            f"‚úÖ *–û—Ç–≥—Ä—É–∑–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n"
            f"üì¶ *{product.category.name} / {product.name}*\n"
            f"   {product.package_type} {product.package_weight}–∫–≥\n\n"
            f"üöö –û—Ç–≥—Ä—É–∂–µ–Ω–æ: *{quantity} —à—Ç* {dest_text}\n"
            f"üìä –ë—ã–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {int(old_stock)} —à—Ç\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: *{int(product.stock_quantity)} —à—Ç*\n\n"
            f"üìÖ –î–∞—Ç–∞: {shipment.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                result_text,
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                result_text,
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
        
        logger.info(
            f"–û—Ç–≥—Ä—É–∑–∫–∞: {product.name} {quantity} —à—Ç ‚Üí {destination or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} "
            f"(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ: {e}", exc_info=True)
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ: {e}"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                error_text,
                reply_markup=get_back_to_main_button()
            )
        else:
            await update.message.reply_text(
                error_text,
                reply_markup=get_back_to_main_button()
            )
        
        context.user_data.clear()
    finally:
        db.close()


# ============================================================================
# –û–¢–ú–ï–ù–ê
# ============================================================================

async def shipment_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏."""
    context.user_data.clear()
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    
    return ConversationHandler.END
