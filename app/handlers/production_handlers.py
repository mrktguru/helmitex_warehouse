"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import recipe_service, stock_service
from app.database.models import RecipeStatus
from app.utils.formatters import format_recipe_list, format_materials_check
from app.logger import get_logger

logger = get_logger("production_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PRODUCTION_SELECT_RECIPE, PRODUCTION_ENTER_WEIGHT, PRODUCTION_CONFIRM = range(3)


def get_back_to_main_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])


# ============================================================================
# –ü–†–û–ò–ó–í–û–î–°–¢–í–û - –ù–ê–ß–ê–õ–û
# ============================================================================

async def production_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        recipes = recipe_service.get_recipes(db, status=RecipeStatus.active)
        
        if not recipes:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¢–ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        keyboard = []
        for recipe in recipes:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìã {recipe.name} (–≤—ã—Ö–æ–¥: {recipe.yield_percent}%)",
                    callback_data=f"prod_recipe_{recipe.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            "‚öôÔ∏è *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return PRODUCTION_SELECT_RECIPE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ production_menu_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –¶–ï–õ–ï–í–û–ì–û –í–ï–°–ê
# ============================================================================

async def production_enter_weight_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_id = int(query.data.split("_")[-1])
    context.user_data["production_recipe_id"] = recipe_id
    
    db = SessionLocal()
    try:
        recipe = recipe_service.get_recipe_by_id(db, recipe_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
        components_text = ""
        for component in recipe.components:
            components_text += (
                f"‚Ä¢ {component.raw_material.category.name} / "
                f"{component.raw_material.name}: {component.percentage:.1f}%\n"
            )
        
        await query.edit_message_text(
            f"‚öôÔ∏è *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ*\n\n"
            f"üìã *–¢–ö: {recipe.name}*\n"
            f"–ü—Ä–æ–¥—É–∫—Ç: *{recipe.semi_product.category.name} / {recipe.semi_product.name}*\n"
            f"–í—ã—Ö–æ–¥: *{recipe.yield_percent}%*\n\n"
            f"*–°–æ—Å—Ç–∞–≤:*\n{components_text}\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞ ({recipe.semi_product.unit.value}):",
            parse_mode="Markdown"
        )
        
        return PRODUCTION_ENTER_WEIGHT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ production_enter_weight_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ê
# ============================================================================

async def production_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—ã—Ä—å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    try:
        target_weight = float(update.message.text.strip().replace(",", "."))
        
        if target_weight <= 0:
            await update.message.reply_text(
                "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return PRODUCTION_ENTER_WEIGHT
        
        recipe_id = context.user_data["production_recipe_id"]
        context.user_data["production_target_weight"] = target_weight
        
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—ã—Ä—å—è
            check_result = recipe_service.check_materials_availability(
                db, recipe_id, target_weight
            )
            
            recipe = recipe_service.get_recipe_by_id(db, recipe_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            text = (
                f"‚öôÔ∏è *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ*\n\n"
                f"üìã *–¢–ö: {recipe.name}*\n"
                f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: *{target_weight:.2f} {recipe.semi_product.unit.value}*\n\n"
            )
            
            text += format_materials_check(check_result)
            
            if check_result["available"]:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="prod_start")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
            if check_result["available"]:
                return PRODUCTION_CONFIRM
            else:
                context.user_data.clear()
                return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—ã—Ä—å—è: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_back_to_main_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.5):"
        )
        return PRODUCTION_ENTER_WEIGHT


# ============================================================================
# –ó–ê–ü–£–°–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ê
# ============================================================================

async def production_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""
    query = update.callback_query
    await query.answer("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ...")
    
    recipe_id = context.user_data["production_recipe_id"]
    target_weight = context.user_data["production_target_weight"]
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        production = stock_service.start_production(
            db,
            recipe_id=recipe_id,
            target_weight=target_weight,
            operator_id=user_id
        )
        
        recipe = recipe_service.get_recipe_by_id(db, recipe_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å–ø–∏—Å–∞–Ω–∏–∏
        materials_text = ""
        materials_needed = recipe_service.calculate_materials_needed(db, recipe_id, target_weight)
        
        for material_id, qty in materials_needed.items():
            material = db.query(recipe.components[0].raw_material.__class__).get(material_id)
            materials_text += (
                f"‚Ä¢ {material.category.name} / {material.name}: "
                f"-{qty:.2f} {material.unit.value}\n"
            )
        
        await query.edit_message_text(
            f"‚úÖ *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
            f"üìã *–¢–ö: {recipe.name}*\n\n"
            f"*–°–ø–∏—Å–∞–Ω–æ —Å—ã—Ä—å—è:*\n{materials_text}\n"
            f"*–ü–æ–ª—É—á–µ–Ω–æ:*\n"
            f"‚úÖ {recipe.semi_product.category.name} / {recipe.semi_product.name}: "
            f"+{target_weight:.2f} {recipe.semi_product.unit.value}\n\n"
            f"üìÖ –î–∞—Ç–∞: {production.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_back_to_main_button(),
            parse_mode="Markdown"
        )
        
        logger.info(
            f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¢–ö '{recipe.name}', "
            f"–ø–æ–ª—É—á–µ–Ω–æ {target_weight} {recipe.semi_product.unit.value} "
            f"(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: {e}",
            reply_markup=get_back_to_main_button()
        )
        context.user_data.clear()
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –û–¢–ú–ï–ù–ê
# ============================================================================

async def production_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""
    context.user_data.clear()
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    
    return ConversationHandler.END
