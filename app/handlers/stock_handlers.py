"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import (
    raw_material_service,
    semi_product_service,
    finished_product_service,
    stock_service
)
from app.utils.formatters import (
    format_raw_material_list,
    format_semi_product_list,
    format_finished_product_list,
    format_movement_history
)
from app.database.models import MovementType
from app.logger import get_logger

logger = get_logger("stock_handlers")


def get_back_to_stock_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ö –æ—Å—Ç–∞—Ç–∫–∞–º", callback_data="stock_menu")
    ]])


def get_back_to_history_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history_menu")
    ]])


# ============================================================================
# –û–°–¢–ê–¢–ö–ò
# ============================================================================

async def stock_raw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞—Ç–∫–∏ —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        materials = raw_material_service.get_raw_materials(db)
        text = format_raw_material_list(materials)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        low_stock = raw_material_service.get_low_stock_materials(db)
        if low_stock:
            text += "\n\n‚ö†Ô∏è *–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:*\n"
            for material in low_stock:
                text += (
                    f"‚Ä¢ {material.category.name} / {material.name}: "
                    f"{material.stock_quantity:.2f} {material.unit.value} "
                    f"(–º–∏–Ω: {material.min_stock:.2f})\n"
                )
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_stock_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å—ã—Ä—å—è: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_stock_button()
        )
    finally:
        db.close()


async def stock_semi_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        products = semi_product_service.get_semi_products(db)
        text = format_semi_product_list(products)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_stock_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_stock_button()
        )
    finally:
        db.close()


async def stock_finished_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        products = finished_product_service.get_finished_products(db)
        text = format_finished_product_list(products)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_stock_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_stock_button()
        )
    finally:
        db.close()


# ============================================================================
# –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô
# ============================================================================

async def history_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        movements = stock_service.get_movements(db, limit=20)
        text = format_movement_history(movements)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_history_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_history_button()
        )
    finally:
        db.close()


async def history_arrival_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—Ö–æ–¥–∞ —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        movements = stock_service.get_movements(db, movement_type=MovementType.arrival, limit=20)
        text = format_movement_history(movements)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_history_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_history_button()
        )
    finally:
        db.close()


async def history_production_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        movements = stock_service.get_movements(
            db, 
            movement_type=MovementType.production_output, 
            limit=20
        )
        text = format_movement_history(movements)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_history_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_history_button()
        )
    finally:
        db.close()


async def history_packing_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞—Å–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        movements = stock_service.get_movements(
            db, 
            movement_type=MovementType.packing_output, 
            limit=20
        )
        text = format_movement_history(movements)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_history_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞—Å–æ–≤–∫–∏: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_history_button()
        )
    finally:
        db.close()


async def history_shipment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≥—Ä—É–∑–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        movements = stock_service.get_movements(
            db, 
            movement_type=MovementType.shipment, 
            limit=20
        )
        text = format_movement_history(movements)
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_to_history_button(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≥—Ä—É–∑–æ–∫: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=get_back_to_history_button()
        )
    finally:
        db.close()
