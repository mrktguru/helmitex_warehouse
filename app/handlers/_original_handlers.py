"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.
"""
from typing import Dict, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    ContextTypes, 
    ConversationHandler, 
    MessageHandler,
    CallbackQueryHandler,
    filters
)

from app.config import TELEGRAM_BOT_TOKEN, OWNER_TELEGRAM_ID
from app.database.db import SessionLocal
from app.database.models import SKUType, RecipeStatus, BarrelStatus
from app.services import _original_services as services
from app.utils.helpers import (
    parse_key_value_lines,
    format_sku_list,
    format_recipe_list,
    format_category_list,
    format_barrel_list
)
from app.logger import get_logger

logger = get_logger("handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    SKU_ADD_TYPE, SKU_ADD_CODE, SKU_ADD_NAME, SKU_ADD_UNIT, 
    SKU_ADD_PACKAGE_WEIGHT, SKU_ADD_CATEGORY,
    CATEGORY_ADD_NAME,
    RECIPE_NEW_SEMI, RECIPE_NEW_YIELD, RECIPE_NEW_COMPONENTS,
    PRODUCE_RECIPE, PRODUCE_BARREL, PRODUCE_TARGET_WEIGHT, PRODUCE_ACTUAL_WEIGHT, PRODUCE_RAW
) = range(15)


# ============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –° INLINE –ö–ù–û–ü–ö–ê–ú–ò
# ============================================================================

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [
            InlineKeyboardButton("üì¶ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", callback_data="menu_sku"),
            InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_category")
        ],
        [
            InlineKeyboardButton("üìã –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipe"),
            InlineKeyboardButton("üõ¢Ô∏è –ë–æ—á–∫–∏", callback_data="menu_barrel")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="menu_production"),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="menu_reports")
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_sku_menu_keyboard():
    """–ú–µ–Ω—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å SKU", callback_data="sku_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ SKU", callback_data="sku_list")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_category_menu_keyboard():
    """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="category_list")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_recipe_menu_keyboard():
    """–ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_new")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="recipe_list")],
        [InlineKeyboardButton("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="recipe_drafts")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_barrel_menu_keyboard():
    """–ú–µ–Ω—é –±–æ—á–µ–∫."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—á–∫—É", callback_data="barrel_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±–æ—á–µ–∫", callback_data="barrel_list")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_sku_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ SKU."""
    keyboard = [
        [InlineKeyboardButton("üåæ –°—ã—Ä—å–µ", callback_data="sku_type_raw")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç", callback_data="sku_type_semi")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="sku_type_finished")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)


# ============================================================================
# –ö–û–ú–ê–ù–î–ê /start
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await update.message.reply_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helmitex Warehouse!*\n\n"
        "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ó–ê–ü–†–û–°–û–í (INLINE –ö–ù–û–ü–ö–ò)
# ============================================================================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await query.edit_message_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ú–µ–Ω—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    elif data == "menu_sku":
        await query.edit_message_text(
            "üì¶ *–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:",
            reply_markup=get_sku_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif data == "menu_category":
        await query.edit_message_text(
            "üìÅ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å—ã—Ä—å—è:",
            reply_markup=get_category_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
    elif data == "menu_recipe":
        await query.edit_message_text(
            "üìã *–†–µ—Ü–µ–ø—Ç—ã*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏:",
            reply_markup=get_recipe_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ú–µ–Ω—é –±–æ—á–µ–∫
    elif data == "menu_barrel":
        await query.edit_message_text(
            "üõ¢Ô∏è *–ë–æ—á–∫–∏*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –µ–º–∫–æ—Å—Ç—è–º–∏:",
            reply_markup=get_barrel_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –°–ø–∏—Å–æ–∫ SKU
    elif data == "sku_list":
        try:
            db = SessionLocal()
            skus = services.list_skus(db)
            text = format_sku_list(skus)
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_sku")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ SKU: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            db.close()
    
    # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif data == "category_list":
        try:
            db = SessionLocal()
            categories = services.list_categories(db)
            text = format_category_list(categories)
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_category")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            db.close()
    
    # –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    elif data == "recipe_list":
        try:
            db = SessionLocal()
            recipes = services.list_recipes(db, status=RecipeStatus.active)
            text = format_recipe_list(recipes)
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_recipe")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            db.close()
    
    # –°–ø–∏—Å–æ–∫ –±–æ—á–µ–∫
    elif data == "barrel_list":
        try:
            db = SessionLocal()
            barrels = services.list_barrels(db)
            text = format_barrel_list(barrels)
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_barrel")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—á–µ–∫: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            db.close()
    
    # –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    elif data == "recipe_drafts":
        if update.effective_user.id != OWNER_TELEGRAM_ID:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
            return
        
        try:
            db = SessionLocal()
            recipes = services.list_recipes(db, status=RecipeStatus.draft)
            text = format_recipe_list(recipes)
            await query.edit_message_text(
                f"üìù *–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:*\n\n{text}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_recipe")
                ]]),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}", exc_info=True)
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            db.close()
    
    # –ü–æ–º–æ—â—å
    elif data == "menu_help":
        help_text = (
            "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π (SKU)\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—ã—Ä—å—è\n"
            "‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (—Ä–µ—Ü–µ–ø—Ç—ã)\n"
            "‚Ä¢ –£—á–µ—Ç –±–æ—á–µ–∫\n"
            "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support"
        )
        await query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]),
            parse_mode="Markdown"
        )


# ============================================================================
# –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏)
# ============================================================================

async def sku_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã (–∫–æ–º–∞–Ω–¥–∞)."""
    try:
        db = SessionLocal()
        skus = services.list_skus(db)
        text = format_sku_list(skus)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ SKU: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


async def category_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–æ–º–∞–Ω–¥–∞)."""
    try:
        db = SessionLocal()
        categories = services.list_categories(db)
        text = format_category_list(categories)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏."""
    await update.message.reply_text(
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.",
        parse_mode="Markdown"
    )


# ============================================================================
# –ü–û–°–¢–†–û–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

def build_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ (–í–ê–ñ–ù–û: –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–º!)
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("sku_list", sku_list_command))
    application.add_handler(CommandHandler("category_list", category_list_command))
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    return application
