"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –º–æ–¥—É–ª–∏.
"""
from typing import Dict, Tuple
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    ContextTypes, 
    ConversationHandler, 
    MessageHandler, 
    filters
)

from app.config import TELEGRAM_BOT_TOKEN, OWNER_TELEGRAM_ID
from app.database.db import SessionLocal
from app.database.models import SKUType, RecipeStatus, BarrelStatus
from app.services import _original_services as services
from app.utils.helpers import (
    parse_key_value_lines,
    format_sku_list,
    format_recipe_list,
    format_category_list,
    format_barrel_list
)
from app.logger import get_logger

logger = get_logger("handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    SKU_ADD_TYPE, SKU_ADD_CODE, SKU_ADD_NAME, SKU_ADD_UNIT, 
    SKU_ADD_PACKAGE_WEIGHT, SKU_ADD_CATEGORY,
    CATEGORY_ADD_NAME,
    RECIPE_NEW_SEMI, RECIPE_NEW_YIELD, RECIPE_NEW_COMPONENTS,
    PRODUCE_RECIPE, PRODUCE_BARREL, PRODUCE_TARGET_WEIGHT, PRODUCE_ACTUAL_WEIGHT, PRODUCE_RAW
) = range(15)


# ============================================================================
# –ö–û–ú–ê–ù–î–ê /start
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helmitex Warehouse!\n\n"
        "üì¶ **–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞:**\n"
        "/sku_add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É\n"
        "/sku_list - –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã\n\n"
        "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
        "/category_add - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/category_list - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
        "üìã **–†–µ—Ü–µ–ø—Ç—ã:**\n"
        "/recipe_new - –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç\n"
        "/recipe_list - –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n\n"
        "‚öôÔ∏è **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:**\n"
        "/produce - –ù–∞—á–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n\n"
        "üõ¢Ô∏è **–ë–æ—á–∫–∏:**\n"
        "/barrel_add - –î–æ–±–∞–≤–∏—Ç—å –±–æ—á–∫—É\n"
        "/barrel_list - –°–ø–∏—Å–æ–∫ –±–æ—á–µ–∫\n\n"
        "üîê **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/tk_drafts - –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "/tk_activate <id> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç",
        parse_mode="Markdown"
    )


# ============================================================================
# –ö–ê–¢–ï–ì–û–†–ò–ò
# ============================================================================

async def category_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await update.message.reply_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    return CATEGORY_ADD_NAME


async def category_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    name = update.message.text.strip()
    
    try:
        db = SessionLocal()
        category = services.add_category(db, name)
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {category.id})")
        await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()
    
    return ConversationHandler.END


async def category_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    try:
        db = SessionLocal()
        categories = services.list_categories(db)
        text = format_category_list(categories)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


# ============================================================================
# –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê (SKU)
# ============================================================================

async def sku_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SKU."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ SKU")
    await update.message.reply_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:\n"
        "1 - –°—ã—Ä—å–µ (raw)\n"
        "2 - –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç (semi)\n"
        "3 - –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (finished)"
    )
    return SKU_ADD_TYPE


async def sku_add_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ SKU."""
    type_map = {"1": SKUType.raw, "2": SKUType.semi, "3": SKUType.finished}
    sku_type = type_map.get(update.message.text.strip())
    
    if not sku_type:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3:")
        return SKU_ADD_TYPE
    
    context.user_data["sku_type"] = sku_type
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:")
    return SKU_ADD_CODE


async def sku_add_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –∫–æ–¥–∞ SKU."""
    code = update.message.text.strip().upper()
    context.user_data["sku_code"] = code
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    return SKU_ADD_NAME


async def sku_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è SKU."""
    name = update.message.text.strip()
    context.user_data["sku_name"] = name
    await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–≥, –ª, —à—Ç):")
    return SKU_ADD_UNIT


async def sku_add_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    unit = update.message.text.strip()
    context.user_data["sku_unit"] = unit
    await update.message.reply_text(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏ (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ):"
    )
    return SKU_ADD_PACKAGE_WEIGHT


async def sku_add_package_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –≤–µ—Å–∞ —É–ø–∞–∫–æ–≤–∫–∏."""
    try:
        weight = float(update.message.text.strip())
        context.user_data["package_weight"] = weight if weight > 0 else None
        
        # –ï—Å–ª–∏ —Å—ã—Ä—å–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if context.user_data["sku_type"] == SKUType.raw:
            db = SessionLocal()
            categories = services.list_categories(db)
            db.close()
            
            if categories:
                cat_text = "\n".join([f"{i+1} - {cat.name}" for i, cat in enumerate(categories)])
                context.user_data["categories"] = categories
                await update.message.reply_text(
                    f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{cat_text}\n\n0 - –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                )
                return SKU_ADD_CATEGORY
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SKU
        return await sku_save(update, context)
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return SKU_ADD_PACKAGE_WEIGHT


async def sku_add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—ã—Ä—å—è."""
    try:
        choice = int(update.message.text.strip())
        categories = context.user_data.get("categories", [])
        
        if choice == 0:
            context.user_data["category_id"] = None
        elif 1 <= choice <= len(categories):
            context.user_data["category_id"] = categories[choice - 1].id
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SKU_ADD_CATEGORY
        
        return await sku_save(update, context)
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return SKU_ADD_CATEGORY


async def sku_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SKU –≤ –±–∞–∑—É."""
    try:
        db = SessionLocal()
        sku = services.add_sku(
            db,
            code=context.user_data["sku_code"],
            name=context.user_data["sku_name"],
            sku_type=context.user_data["sku_type"],
            unit=context.user_data["sku_unit"],
            package_weight=context.user_data.get("package_weight"),
            category_id=context.user_data.get("category_id")
        )
        logger.info(f"SKU '{sku.code}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {sku.id})")
        await update.message.reply_text(
            f"‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–ö–æ–¥: {sku.code}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {sku.name}\n"
            f"–¢–∏–ø: {sku.type.value}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ SKU: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()
        context.user_data.clear()
    
    return ConversationHandler.END


async def sku_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã."""
    try:
        db = SessionLocal()
        skus = services.list_skus(db)
        text = format_sku_list(skus)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ SKU: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


# ============================================================================
# –†–ï–¶–ï–ü–¢–´
# ============================================================================

async def recipe_new_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞")
    
    try:
        db = SessionLocal()
        semi_skus = services.list_skus(db, sku_type=SKUType.semi)
        db.close()
        
        if not semi_skus:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç —á–µ—Ä–µ–∑ /sku_add"
            )
            return ConversationHandler.END
        
        sku_text = "\n".join([f"{i+1} - {sku.code} ({sku.name})" for i, sku in enumerate(semi_skus)])
        context.user_data["semi_skus"] = semi_skus
        
        await update.message.reply_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç:\n{sku_text}"
        )
        return RECIPE_NEW_SEMI
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END


async def recipe_new_semi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞."""
    try:
        choice = int(update.message.text.strip())
        semi_skus = context.user_data.get("semi_skus", [])
        
        if 1 <= choice <= len(semi_skus):
            context.user_data["semi_sku_id"] = semi_skus[choice - 1].id
            await update.message.reply_text(
                "üìä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ (% –æ—Ç 50 –¥–æ 100):"
            )
            return RECIPE_NEW_YIELD
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return RECIPE_NEW_SEMI
            
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return RECIPE_NEW_SEMI


async def recipe_new_yield(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞."""
    try:
        yield_pct = float(update.message.text.strip())
        
        if not (50 <= yield_pct <= 100):
            await update.message.reply_text("‚ùå –í—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 100%:")
            return RECIPE_NEW_YIELD
        
        context.user_data["theoretical_yield"] = yield_pct
        
        db = SessionLocal()
        raw_skus = services.list_skus(db, sku_type=SKUType.raw)
        db.close()
        
        if not raw_skus:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç —Å—ã—Ä—å—è. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—ã—Ä—å–µ —á–µ—Ä–µ–∑ /sku_add"
            )
            return ConversationHandler.END
        
        sku_text = "\n".join([f"{sku.code} - {sku.name}" for sku in raw_skus])
        
        await update.message.reply_text(
            f"üåæ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–∫–æ–¥_—Å—ã—Ä—å—è: –ø—Ä–æ—Ü–µ–Ω—Ç\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"RAW001: 50\n"
            f"RAW002: 30\n"
            f"RAW003: 20\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ —Å—ã—Ä—å–µ:\n{sku_text}\n\n"
            f"‚ö†Ô∏è –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%"
        )
        return RECIPE_NEW_COMPONENTS
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return RECIPE_NEW_YIELD


async def recipe_new_components(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞."""
    try:
        components_data = parse_key_value_lines(update.message.text)
        
        db = SessionLocal()
        components = []
        total_pct = 0
        
        for code, pct_str in components_data.items():
            sku = services.find_sku_by_code(db, code.upper())
            if not sku:
                db.close()
                await update.message.reply_text(f"‚ùå –°—ã—Ä—å–µ —Å –∫–æ–¥–æ–º '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return RECIPE_NEW_COMPONENTS
            
            if sku.type != SKUType.raw:
                db.close()
                await update.message.reply_text(f"‚ùå '{code}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—ã—Ä—å–µ–º")
                return RECIPE_NEW_COMPONENTS
            
            pct = float(pct_str)
            components.append({"raw_sku_id": sku.id, "percentage": pct})
            total_pct += pct
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if abs(total_pct - 100.0) > 0.01:
            db.close()
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = {total_pct}%, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%"
            )
            return RECIPE_NEW_COMPONENTS
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
        recipe = services.create_recipe(
            db,
            semi_sku_id=context.user_data["semi_sku_id"],
            theoretical_yield=context.user_data["theoretical_yield"],
            components=components,
            status=RecipeStatus.draft
        )
        
        logger.info(f"–†–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω (ID: {recipe.id})")
        await update.message.reply_text(
            f"‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"ID: {recipe.id}\n"
            f"–°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\n"
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        
        db.close()
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END


async def recipe_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    try:
        db = SessionLocal()
        recipes = services.list_recipes(db, status=RecipeStatus.active)
        text = format_recipe_list(recipes)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


# ============================================================================
# –ë–û–ß–ö–ò
# ============================================================================

async def barrel_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—á–∫–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –±–æ—á–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /barrel_add <–Ω–æ–º–µ—Ä>")
            return
        
        number = " ".join(args)
        
        db = SessionLocal()
        barrel = services.add_barrel(db, number)
        logger.info(f"–ë–æ—á–∫–∞ '{number}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {barrel.id})")
        await update.message.reply_text(f"‚úÖ –ë–æ—á–∫–∞ '{number}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        db.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—á–∫–∏: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def barrel_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –±–æ—á–µ–∫."""
    try:
        db = SessionLocal()
        barrels = services.list_barrels(db)
        text = format_barrel_list(barrels)
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—á–µ–∫: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


# ============================================================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
# ============================================================================

async def tk_drafts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    if update.effective_user.id != OWNER_TELEGRAM_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        db = SessionLocal()
        recipes = services.list_recipes(db, status=RecipeStatus.draft)
        text = format_recipe_list(recipes)
        await update.message.reply_text(f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏:\n\n{text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


async def tk_activate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    if update.effective_user.id != OWNER_TELEGRAM_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = context.args
        if not args:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tk_activate <id>")
            return
        
        recipe_id = int(args[0])
        
        db = SessionLocal()
        recipe = services.activate_recipe(db, recipe_id)
        
        if recipe:
            logger.info(f"–†–µ—Ü–µ–ø—Ç {recipe_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await update.message.reply_text(f"‚úÖ –†–µ—Ü–µ–ø—Ç {recipe_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –†–µ—Ü–µ–ø—Ç {recipe_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        db.close()
        
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# ============================================================================
# –û–¢–ú–ï–ù–ê –û–ü–ï–†–ê–¶–ò–ô
# ============================================================================

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


# ============================================================================
# –ü–û–°–¢–†–û–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

def build_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sku_list", sku_list))
    application.add_handler(CommandHandler("category_list", category_list))
    application.add_handler(CommandHandler("recipe_list", recipe_list))
    application.add_handler(CommandHandler("barrel_add", barrel_add))
    application.add_handler(CommandHandler("barrel_list", barrel_list))
    application.add_handler(CommandHandler("tk_drafts", tk_drafts))
    application.add_handler(CommandHandler("tk_activate", tk_activate))
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_conv = ConversationHandler(
        entry_points=[CommandHandler("category_add", category_add_start)],
        states={
            CATEGORY_ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_add_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(category_conv)
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SKU
    sku_conv = ConversationHandler(
        entry_points=[CommandHandler("sku_add", sku_add_start)],
        states={
            SKU_ADD_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_type)],
            SKU_ADD_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_code)],
            SKU_ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_name)],
            SKU_ADD_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_unit)],
            SKU_ADD_PACKAGE_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_package_weight)],
            SKU_ADD_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, sku_add_category)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(sku_conv)
    
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_conv = ConversationHandler(
        entry_points=[CommandHandler("recipe_new", recipe_new_start)],
        states={
            RECIPE_NEW_SEMI: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_new_semi)],
            RECIPE_NEW_YIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_new_yield)],
            RECIPE_NEW_COMPONENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recipe_new_components)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(recipe_conv)
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    return application
