"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω).
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import recipe_service, semi_product_service, raw_material_service
from app.database.models import RecipeStatus
from app.utils.formatters import format_recipe_list, format_recipe_details
from app.utils.helpers import parse_key_value_lines, validate_percentage_sum
from app.config import OWNER_TELEGRAM_ID
from app.logger import get_logger

logger = get_logger("recipe_admin_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
RECIPE_NAME, RECIPE_SEMI, RECIPE_YIELD, RECIPE_COMPONENTS = range(4)


def get_back_to_settings_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
    ]])


# ============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–¶–ï–ü–¢–ê–ú–ò
# ============================================================================

async def admin_recipes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏."""
    query = update.callback_query
    
    if update.effective_user.id != OWNER_TELEGRAM_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await query.answer()
    
    db = SessionLocal()
    try:
        recipes = recipe_service.get_recipes(db)
        text = format_recipe_list(recipes)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –¢–ö", callback_data="admin_recipe_add")],
            [InlineKeyboardButton("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="admin_recipe_drafts")],
            [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
        ]
        
        await query.edit_message_text(
            f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_recipes_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_recipe_drafts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        recipes = recipe_service.get_recipes(db, status=RecipeStatus.draft)
        
        if not recipes:
            await query.edit_message_text(
                "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ—Ç",
                reply_markup=get_back_to_settings_button()
            )
            return
        
        keyboard = []
        for recipe in recipes:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìã {recipe.name} (ID: {recipe.id})",
                    callback_data=f"admin_recipe_view_{recipe.id}"
                )
            ])
        keyboard.append([
            InlineKeyboardButton("üîô –ö —Ä–µ—Ü–µ–ø—Ç–∞–º", callback_data="admin_recipes")
        ])
        
        await query.edit_message_text(
            "üìù *–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_recipe_drafts_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_recipe_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ü–µ–ø—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    recipe_id = int(query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        recipe = recipe_service.get_recipe_by_id(db, recipe_id)
        text = format_recipe_details(recipe)
        
        keyboard = []
        
        if recipe.status == RecipeStatus.draft:
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_recipe_activate_{recipe_id}")
            ])
        elif recipe.status == RecipeStatus.active:
            keyboard.append([
                InlineKeyboardButton("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_recipe_archive_{recipe_id}")
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ö —Ä–µ—Ü–µ–ø—Ç–∞–º", callback_data="admin_recipes")
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_recipe_view_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_recipe_activate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    recipe_id = int(query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        recipe = recipe_service.activate_recipe(db, recipe_id)
        
        await query.edit_message_text(
            f"‚úÖ –†–µ—Ü–µ–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üìã {recipe.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {recipe.status.value}",
            reply_markup=get_back_to_settings_button()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_recipe_archive_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    recipe_id = int(query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        recipe = recipe_service.archive_recipe(db, recipe_id)
        
        await query.edit_message_text(
            f"üì¶ –†–µ—Ü–µ–ø—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üìã {recipe.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {recipe.status.value}",
            reply_markup=get_back_to_settings_button()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


# ============================================================================
# –°–û–ó–î–ê–ù–ò–ï –†–ï–¶–ï–ü–¢–ê
# ============================================================================

async def admin_recipe_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìã *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¢–ö:",
        parse_mode="Markdown"
    )
    
    return RECIPE_NAME


async def admin_recipe_name_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    name = update.message.text.strip()
    context.user_data["recipe_name"] = name
    
    db = SessionLocal()
    try:
        semi_products = semi_product_service.get_semi_products(db)
        
        if not semi_products:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç.",
                reply_markup=get_back_to_settings_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
        keyboard = []
        for product in semi_products:
            keyboard.append([
                InlineKeyboardButton(
                    f"{product.category.name} / {product.name}",
                    callback_data=f"admin_recipe_semi_{product.id}"
                )
            ])
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_recipes")
        ])
        
        await update.message.reply_text(
            f"üìã *–°–æ–∑–¥–∞–Ω–∏–µ –¢–ö*\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{name}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return RECIPE_SEMI
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_recipe_name_entered: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
        context.user_data.clear()
        return ConversationHandler.END
    finally:
        db.close()


async def admin_recipe_semi_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    semi_product_id = int(query.data.split("_")[-1])
    context.user_data["recipe_semi_id"] = semi_product_id
    
    await query.edit_message_text(
        f"üìã *–°–æ–∑–¥–∞–Ω–∏–µ –¢–ö*\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{context.user_data['recipe_name']}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ (50-100%):",
        parse_mode="Markdown"
    )
    
    return RECIPE_YIELD


async def admin_recipe_yield_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞."""
    try:
        yield_percent = float(update.message.text.strip().replace(",", "."))
        
        if not (50 <= yield_percent <= 100):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 100.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return RECIPE_YIELD
        
        context.user_data["recipe_yield"] = yield_percent
        
        db = SessionLocal()
        try:
            materials = raw_material_service.get_raw_materials(db)
            
            materials_text = "\n".join([
                f"‚Ä¢ {m.category.name} / {m.name}"
                for m in materials
            ])
            
            await update.message.reply_text(
                f"üìã *–°–æ–∑–¥–∞–Ω–∏–µ –¢–ö*\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{context.user_data['recipe_name']}*\n"
                f"–í—ã—Ö–æ–¥: *{yield_percent}%*\n\n"
                f"*–î–æ—Å—Ç—É–ø–Ω–æ–µ —Å—ã—Ä—å–µ:*\n{materials_text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`–ö–∞—Ç–µ–≥–æ—Ä–∏—è / –ù–∞–∑–≤–∞–Ω–∏–µ: –ø—Ä–æ—Ü–µ–Ω—Ç`\n\n"
                f"–ü—Ä–∏–º–µ—Ä:\n"
                f"`–ú—É–∫–∞ / –ü—à–µ–Ω–∏—á–Ω–∞—è: 60`\n"
                f"`–í–æ–¥–∞: 30`\n"
                f"`–°–æ–ª—å: 10`\n\n"
                f"‚ö†Ô∏è –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%",
                parse_mode="Markdown"
            )
            
            return RECIPE_COMPONENTS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_recipe_yield_entered: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_back_to_settings_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80 –∏–ª–∏ 85.5):"
        )
        return RECIPE_YIELD


async def admin_recipe_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    components_text = update.message.text.strip()
    
    db = SessionLocal()
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        lines = components_text.split("\n")
        components = []
        percentages = []
        
        for line in lines:
            if ":" not in line:
                continue
            
            material_name, percentage_str = line.split(":", 1)
            material_name = material_name.strip()
            percentage = float(percentage_str.strip().replace(",", "."))
            
            # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            materials = raw_material_service.get_raw_materials(db)
            material = None
            
            for m in materials:
                full_name = f"{m.category.name} / {m.name}"
                if material_name.lower() in full_name.lower() or m.name.lower() == material_name.lower():
                    material = m
                    break
            
            if not material:
                await update.message.reply_text(
                    f"‚ùå –°—ã—Ä—å–µ '{material_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_back_to_settings_button()
                )
                return RECIPE_COMPONENTS
            
            components.append({
                "raw_material_id": material.id,
                "percentage": percentage
            })
            percentages.append(percentage)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if not validate_percentage_sum(percentages):
            total = sum(percentages)
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = {total:.1f}%, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return RECIPE_COMPONENTS
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
        recipe = recipe_service.create_recipe(
            db,
            name=context.user_data["recipe_name"],
            semi_product_id=context.user_data["recipe_semi_id"],
            yield_percent=context.user_data["recipe_yield"],
            components=components,
            created_by=update.effective_user.id
        )
        
        await update.message.reply_text(
            f"‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã {recipe.name}\n"
            f"ID: {recipe.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {recipe.status.value}\n\n"
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.",
            reply_markup=get_back_to_settings_button()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
        context.user_data.clear()
        return ConversationHandler.END
    finally:
        db.close()


async def admin_recipe_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    context.user_data.clear()
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_settings_button()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_settings_button()
        )
    
    return ConversationHandler.END
