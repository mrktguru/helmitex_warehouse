"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ —Å—ã—Ä—å—è.
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from app.database.db import get_db
from app.database.models import CategoryType, UnitType, SKUType
from app.services import user_service, sku_service, movement_service, warehouse_service
from app.database.models import MovementType

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_CATEGORY, SELECT_SKU, ENTER_QUANTITY, CONFIRM = range(4)


def get_category_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = []
    for category in CategoryType:
        keyboard.append([InlineKeyboardButton(
            category.value,
            callback_data=f"cat_{category.name}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="arrival")])
    return InlineKeyboardMarkup(keyboard)


def get_sku_keyboard(category: CategoryType):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    with get_db() as db:
        skus = sku_service.get_skus_by_category(db, category)
    
    keyboard = []
    if skus:
        for sku in skus:
            keyboard.append([InlineKeyboardButton(
                f"{sku.name} ({sku.unit.value})",
                callback_data=f"sku_{sku.id}"
            )])
    else:
        keyboard.append([InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            callback_data="add_new_sku"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="arrival_add")])
    return InlineKeyboardMarkup(keyboard)


async def arrival_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
        "–®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—ã—Ä—å—è:",
        reply_markup=get_category_keyboard(),
        parse_mode='Markdown'
    )
    
    return SELECT_CATEGORY


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category_name = query.data.replace("cat_", "")
    category = CategoryType[category_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['arrival_category'] = category
    
    await query.edit_message_text(
        f"üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category.value}*\n\n"
        f"–®–∞–≥ 2/3: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_sku_keyboard(category),
        parse_mode='Markdown'
    )
    
    return SELECT_SKU


async def select_sku(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    sku_id = int(query.data.replace("sku_", ""))
    
    with get_db() as db:
        sku = sku_service.get_sku(db, sku_id)
    
    if not sku:
        await query.edit_message_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_category_keyboard()
        )
        return SELECT_CATEGORY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['arrival_sku'] = sku
    
    await query.edit_message_text(
        f"üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{sku.category.value}*\n"
        f"–¢–æ–≤–∞—Ä: *{sku.name}*\n"
        f"–ï–¥–∏–Ω–∏—Ü–∞: *{sku.unit.value}*\n\n"
        f"–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({sku.unit.value}):",
        parse_mode='Markdown'
    )
    
    return ENTER_QUANTITY


async def enter_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = float(update.message.text.replace(',', '.'))
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTER_QUANTITY
        
        sku = context.user_data['arrival_sku']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        context.user_data['arrival_quantity'] = quantity
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_arrival"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_arrival")
            ]
        ]
        
        await update.message.reply_text(
            f"üì• *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{sku.category.value}*\n"
            f"–¢–æ–≤–∞—Ä: *{sku.name}*\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} {sku.unit.value}*\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return CONFIRM
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5):"
        )
        return ENTER_QUANTITY


async def confirm_arrival(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_arrival":
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            parse_mode='Markdown'
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sku = context.user_data['arrival_sku']
    quantity = context.user_data['arrival_quantity']
    user = update.effective_user
    
    try:
        with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = user_service.get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                full_name=user.full_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            warehouse = warehouse_service.get_default_warehouse(db)
            if not warehouse:
                # –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                warehouse = warehouse_service.create_warehouse(
                    db=db,
                    name="–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥",
                    is_default=True
                )
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ (–ø—Ä–∏—Ö–æ–¥)
            movement = movement_service.create_movement(
                db=db,
                warehouse_id=warehouse.id,
                sku_id=sku.id,
                movement_type=MovementType.in_,
                quantity=quantity,
                user_id=db_user.id,
                notes=f"–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            from app.services import stock_service
            stock = stock_service.get_stock(db, warehouse.id, sku.id)
        
        await query.edit_message_text(
            f"‚úÖ *–ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{sku.category.value}*\n"
            f"–¢–æ–≤–∞—Ä: *{sku.name}*\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} {sku.unit.value}*\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: *{stock.quantity} {sku.unit.value}*\n\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è #{movement.id}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error creating arrival: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞:\n{str(e)}",
            parse_mode='Markdown'
        )
    
    context.user_data.clear()
    return ConversationHandler.END
