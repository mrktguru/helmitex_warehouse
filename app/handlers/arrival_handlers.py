"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ —Å—ã—Ä—å—è.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import raw_material_service, category_service, stock_service
from app.database.models import CategoryType
from app.logger import get_logger

logger = get_logger("arrival_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ARRIVAL_SELECT_CATEGORY, ARRIVAL_SELECT_MATERIAL, ARRIVAL_ENTER_QUANTITY = range(3)


def get_back_to_main_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])


# ============================================================================
# –ü–†–ò–•–û–î –°–´–†–¨–Ø - –ù–ê–ß–ê–õ–û
# ============================================================================

async def arrival_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø—Ä–∏—Ö–æ–¥–∞ —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—ã—Ä—å—è
        categories = category_service.get_categories(db, category_type=CategoryType.raw_material)
        
        if not categories:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—ã—Ä—å—è.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for category in categories:
            keyboard.append([
                InlineKeyboardButton(
                    f"üåæ {category.name}",
                    callback_data=f"arrival_cat_{category.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            "üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—ã—Ä—å—è:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return ARRIVAL_SELECT_CATEGORY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ arrival_menu_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–´–ë–û–† –ú–ê–¢–ï–†–ò–ê–õ–ê
# ============================================================================

async def arrival_select_material_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = int(query.data.split("_")[-1])
    context.user_data["arrival_category_id"] = category_id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        materials = raw_material_service.get_raw_materials(db, category_id=category_id)
        
        if not materials:
            category = category_service.get_category_by_id(db, category_id)
            await query.edit_message_text(
                f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –Ω–µ—Ç —Å—ã—Ä—å—è.\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—ã—Ä—å–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        keyboard = []
        for material in materials:
            keyboard.append([
                InlineKeyboardButton(
                    f"{material.name} (–æ—Å—Ç–∞—Ç–æ–∫: {material.stock_quantity:.2f} {material.unit.value})",
                    callback_data=f"arrival_mat_{material.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="arrival_menu"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        category = category_service.get_category_by_id(db, category_id)
        
        await query.edit_message_text(
            f"üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category.name}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return ARRIVAL_SELECT_MATERIAL
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ arrival_select_material_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê
# ============================================================================

async def arrival_enter_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_id = int(query.data.split("_")[-1])
    context.user_data["arrival_material_id"] = material_id
    
    db = SessionLocal()
    try:
        material = raw_material_service.get_raw_material_by_id(db, material_id)
        
        await query.edit_message_text(
            f"üì• *–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{material.category.name}*\n"
            f"–°—ã—Ä—å–µ: *{material.name}*\n"
            f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: *{material.stock_quantity:.2f} {material.unit.value}*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–∞ ({material.unit.value}):",
            parse_mode="Markdown"
        )
        
        return ARRIVAL_ENTER_QUANTITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ arrival_enter_quantity_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò–•–û–î–ê
# ============================================================================

async def arrival_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å—ã—Ä—å—è."""
    try:
        quantity = float(update.message.text.strip().replace(",", "."))
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return ARRIVAL_ENTER_QUANTITY
        
        material_id = context.user_data["arrival_material_id"]
        user_id = update.effective_user.id
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞
            material = raw_material_service.get_raw_material_by_id(db, material_id)
            old_stock = material.stock_quantity
            
            # –û—Ñ–æ—Ä–º–ª—è–µ–º –ø—Ä–∏—Ö–æ–¥
            movement = stock_service.add_arrival(
                db,
                raw_material_id=material_id,
                quantity=quantity,
                operator_id=user_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            material = raw_material_service.get_raw_material_by_id(db, material_id)
            
            await update.message.reply_text(
                f"‚úÖ *–ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
                f"üì¶ *{material.category.name} / {material.name}*\n"
                f"‚ûï –ü–æ—Å—Ç—É–ø–∏–ª–æ: *{quantity:.2f} {material.unit.value}*\n"
                f"üìä –ë—ã–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {old_stock:.2f} {material.unit.value}\n"
                f"üìä –°—Ç–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: *{material.stock_quantity:.2f} {material.unit.value}*\n"
                f"üìÖ –î–∞—Ç–∞: {movement.created_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
            
            logger.info(
                f"–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è: {material.category.name}/{material.name} "
                f"+{quantity} {material.unit.value} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}",
                reply_markup=get_back_to_main_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 50.5):"
        )
        return ARRIVAL_ENTER_QUANTITY


# ============================================================================
# –û–¢–ú–ï–ù–ê
# ============================================================================

async def arrival_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞."""
    context.user_data.clear()
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    
    return ConversationHandler.END
