"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ –≤ –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é.
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import semi_product_service, finished_product_service, stock_service
from app.logger import get_logger

logger = get_logger("packing_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PACKING_SELECT_SEMI, PACKING_SELECT_FINISHED, PACKING_ENTER_QUANTITY = range(3)


def get_back_to_main_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])


# ============================================================================
# –§–ê–°–û–í–ö–ê - –ù–ê–ß–ê–õ–û
# ============================================================================

async def packing_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ñ–∞—Å–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        semi_products = semi_product_service.get_semi_products(db)
        available_products = [p for p in semi_products if p.stock_quantity > 0]
        
        if not available_products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞–º–∏
        keyboard = []
        for product in available_products:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è {product.category.name} / {product.name} "
                    f"({product.stock_quantity:.2f} {product.unit.value})",
                    callback_data=f"pack_semi_{product.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            "üì¶ *–§–∞—Å–æ–≤–∫–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return PACKING_SELECT_SEMI
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ packing_menu_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–´–ë–û–† –ì–û–¢–û–í–û–ô –ü–†–û–î–£–ö–¶–ò–ò
# ============================================================================

async def packing_select_finished_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
    semi_product_id = int(query.data.split("_")[-1])
    context.user_data["packing_semi_id"] = semi_product_id
    
    db = SessionLocal()
    try:
        semi_product = semi_product_service.get_semi_product_by_id(db, semi_product_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é
        finished_products = finished_product_service.get_finished_products(db)
        
        if not finished_products:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=get_back_to_main_button()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        keyboard = []
        for product in finished_products:
            keyboard.append([
                InlineKeyboardButton(
                    f"üì¶ {product.name} ({product.package_type} {product.package_weight}–∫–≥)",
                    callback_data=f"pack_fin_{product.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ö –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞–º", callback_data="packing_menu"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            f"üì¶ *–§–∞—Å–æ–≤–∫–∞*\n\n"
            f"–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç: *{semi_product.category.name} / {semi_product.name}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: *{semi_product.stock_quantity:.2f} {semi_product.unit.value}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return PACKING_SELECT_FINISHED
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ packing_select_finished_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê
# ============================================================================

async def packing_enter_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    finished_product_id = int(query.data.split("_")[-1])
    context.user_data["packing_finished_id"] = finished_product_id
    
    db = SessionLocal()
    try:
        semi_product = semi_product_service.get_semi_product_by_id(
            db, context.user_data["packing_semi_id"]
        )
        finished_product = finished_product_service.get_finished_product_by_id(
            db, finished_product_id
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫
        max_packages = int(semi_product.stock_quantity / finished_product.package_weight)
        
        await query.edit_message_text(
            f"üì¶ *–§–∞—Å–æ–≤–∫–∞*\n\n"
            f"–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç: *{semi_product.category.name} / {semi_product.name}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: *{semi_product.stock_quantity:.2f} {semi_product.unit.value}*\n\n"
            f"–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è: *{finished_product.name}*\n"
            f"–¢–∞—Ä–∞: {finished_product.package_type} {finished_product.package_weight}–∫–≥\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º —É–ø–∞–∫–æ–≤–æ–∫: *{max_packages} —à—Ç*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫:",
            parse_mode="Markdown"
        )
        
        return PACKING_ENTER_QUANTITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ packing_enter_quantity_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_main_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–°–û–í–ö–ò
# ============================================================================

async def packing_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞—Å–æ–≤–∫–∏."""
    try:
        quantity = int(update.message.text.strip())
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return PACKING_ENTER_QUANTITY
        
        semi_product_id = context.user_data["packing_semi_id"]
        finished_product_id = context.user_data["packing_finished_id"]
        user_id = update.effective_user.id
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ñ–∞—Å–æ–≤–∫–∏
            semi_product = semi_product_service.get_semi_product_by_id(db, semi_product_id)
            finished_product = finished_product_service.get_finished_product_by_id(db, finished_product_id)
            
            old_semi_stock = semi_product.stock_quantity
            old_finished_stock = finished_product.stock_quantity
            weight_needed = finished_product.package_weight * quantity
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
            if weight_needed > old_semi_stock:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞.\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {weight_needed:.2f} {semi_product.unit.value}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {old_semi_stock:.2f} {semi_product.unit.value}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                    reply_markup=get_back_to_main_button()
                )
                return PACKING_ENTER_QUANTITY
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞—Å–æ–≤–∫—É
            packing = stock_service.create_packing(
                db,
                semi_product_id=semi_product_id,
                finished_product_id=finished_product_id,
                quantity=quantity,
                operator_id=user_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            semi_product = semi_product_service.get_semi_product_by_id(db, semi_product_id)
            finished_product = finished_product_service.get_finished_product_by_id(db, finished_product_id)
            
            await update.message.reply_text(
                f"‚úÖ *–§–∞—Å–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"*–°–ø–∏—Å–∞–Ω–æ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞:*\n"
                f"‚öôÔ∏è {semi_product.category.name} / {semi_product.name}\n"
                f"   -{weight_needed:.2f} {semi_product.unit.value}\n"
                f"   –ë—ã–ª–æ: {old_semi_stock:.2f}, —Å—Ç–∞–ª–æ: {semi_product.stock_quantity:.2f}\n\n"
                f"*–ü–æ–ª—É—á–µ–Ω–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:*\n"
                f"üì¶ {finished_product.name}\n"
                f"   +{quantity} —à—Ç\n"
                f"   –ë—ã–ª–æ: {int(old_finished_stock)}, —Å—Ç–∞–ª–æ: {int(finished_product.stock_quantity)}\n\n"
                f"üìÖ –î–∞—Ç–∞: {packing.created_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_back_to_main_button(),
                parse_mode="Markdown"
            )
            
            logger.info(
                f"–§–∞—Å–æ–≤–∫–∞: {finished_product.name} {quantity} —à—Ç "
                f"({weight_needed} –∫–≥ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞) (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞—Å–æ–≤–∫–µ: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞—Å–æ–≤–∫–µ: {e}",
                reply_markup=get_back_to_main_button()
            )
            context.user_data.clear()
            return ConversationHandler.END
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):"
        )
        return PACKING_ENTER_QUANTITY


# ============================================================================
# –û–¢–ú–ï–ù–ê
# ============================================================================

async def packing_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ–∞—Å–æ–≤–∫–∏."""
    context.user_data.clear()
    
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_back_to_main_button()
        )
    
    return ConversationHandler.END
