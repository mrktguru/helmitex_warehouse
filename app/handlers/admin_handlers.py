"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏.
–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (OWNER_TELEGRAM_ID).
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.services import (
    category_service,
    raw_material_service,
    semi_product_service,
    finished_product_service,
    recipe_service
)
from app.database.models import CategoryType, UnitType, RecipeStatus
from app.utils.formatters import (
    format_category_list,
    format_raw_material_list,
    format_semi_product_list,
    format_finished_product_list,
    format_recipe_list,
    format_recipe_details
)
from app.utils.decorators import admin_only
from app.config import OWNER_TELEGRAM_ID
from app.logger import get_logger

logger = get_logger("admin_handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADMIN_CATEGORY_NAME, ADMIN_CATEGORY_TYPE,
    ADMIN_RAW_CATEGORY, ADMIN_RAW_NAME, ADMIN_RAW_UNIT,
    ADMIN_SEMI_CATEGORY, ADMIN_SEMI_NAME, ADMIN_SEMI_UNIT,
    ADMIN_FINISHED_CATEGORY, ADMIN_FINISHED_NAME, ADMIN_FINISHED_PACKAGE_TYPE,
    ADMIN_FINISHED_PACKAGE_WEIGHT,
    ADMIN_RECIPE_NAME, ADMIN_RECIPE_SEMI, ADMIN_RECIPE_YIELD, ADMIN_RECIPE_COMPONENTS
) = range(17)


def get_back_to_settings_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
    ]])


# ============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò
# ============================================================================

async def admin_categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    query = update.callback_query
    
    if update.effective_user.id != OWNER_TELEGRAM_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await query.answer()
    
    db = SessionLocal()
    try:
        categories = category_service.get_categories(db)
        text = format_category_list(categories)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_cat_add")],
            [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
        ]
        
        await query.edit_message_text(
            f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_categories_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_category_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üåæ –°—ã—Ä—å–µ", callback_data="admin_cat_type_raw")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã", callback_data="admin_cat_type_semi")],
        [InlineKeyboardButton("üì¶ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="admin_cat_type_finished")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_categories")]
    ]
    
    await query.edit_message_text(
        "üìÅ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return ADMIN_CATEGORY_TYPE


async def admin_category_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    type_map = {
        "admin_cat_type_raw": CategoryType.raw_material,
        "admin_cat_type_semi": CategoryType.semi_product,
        "admin_cat_type_finished": CategoryType.finished_product
    }
    
    category_type = type_map.get(query.data)
    context.user_data["admin_category_type"] = category_type
    
    type_names = {
        CategoryType.raw_material: "–°—ã—Ä—å–µ",
        CategoryType.semi_product: "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã",
        CategoryType.finished_product: "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"
    }
    
    await query.edit_message_text(
        f"üìÅ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n"
        f"–¢–∏–ø: *{type_names[category_type]}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode="Markdown"
    )
    
    return ADMIN_CATEGORY_NAME


async def admin_category_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    name = update.message.text.strip()
    category_type = context.user_data["admin_category_type"]
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        category = category_service.create_category(
            db,
            name=name,
            category_type=category_type,
            created_by=user_id
        )
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"ID: {category.id}",
            reply_markup=get_back_to_settings_button()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
        context.user_data.clear()
        return ConversationHandler.END
    finally:
        db.close()


# ============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–´–†–¨–ï–ú
# ============================================================================

async def admin_raw_materials_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—ã—Ä—å–µ–º."""
    query = update.callback_query
    
    if update.effective_user.id != OWNER_TELEGRAM_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await query.answer()
    
    db = SessionLocal()
    try:
        materials = raw_material_service.get_raw_materials(db)
        text = format_raw_material_list(materials)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—ã—Ä—å–µ", callback_data="admin_raw_add")],
            [InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
        ]
        
        await query.edit_message_text(
            f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_raw_materials_callback: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
    finally:
        db.close()


async def admin_raw_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    try:
        categories = category_service.get_categories(db, category_type=CategoryType.raw_material)
        
        if not categories:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—ã—Ä—å—è.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=get_back_to_settings_button()
            )
            return ConversationHandler.END
        
        keyboard = []
        for cat in categories:
            keyboard.append([
                InlineKeyboardButton(cat.name, callback_data=f"admin_raw_cat_{cat.id}")
            ])
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_raw_materials")
        ])
        
        await query.edit_message_text(
            "üåæ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—ã—Ä—å—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return ADMIN_RAW_CATEGORY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_raw_add_start: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
        return ConversationHandler.END
    finally:
        db.close()


async def admin_raw_category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    category_id = int(query.data.split("_")[-1])
    context.user_data["admin_raw_category_id"] = category_id
    
    await query.edit_message_text(
        "üåæ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—ã—Ä—å—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—ã—Ä—å—è:",
        parse_mode="Markdown"
    )
    
    return ADMIN_RAW_NAME


async def admin_raw_name_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—ã—Ä—å—è."""
    name = update.message.text.strip()
    context.user_data["admin_raw_name"] = name
    
    keyboard = [
        [InlineKeyboardButton("–∫–≥", callback_data="admin_raw_unit_kg")],
        [InlineKeyboardButton("–ª", callback_data="admin_raw_unit_liter")],
        [InlineKeyboardButton("–≥", callback_data="admin_raw_unit_gram")],
        [InlineKeyboardButton("–º–ª", callback_data="admin_raw_unit_ml")],
        [InlineKeyboardButton("—à—Ç", callback_data="admin_raw_unit_piece")]
    ]
    
    await update.message.reply_text(
        f"üåæ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—ã—Ä—å—è*\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{name}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return ADMIN_RAW_UNIT


async def admin_raw_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—å—è."""
    query = update.callback_query
    await query.answer()
    
    unit_map = {
        "admin_raw_unit_kg": UnitType.kg,
        "admin_raw_unit_liter": UnitType.liter,
        "admin_raw_unit_gram": UnitType.gram,
        "admin_raw_unit_ml": UnitType.ml,
        "admin_raw_unit_piece": UnitType.piece
    }
    
    unit = unit_map.get(query.data)
    category_id = context.user_data["admin_raw_category_id"]
    name = context.user_data["admin_raw_name"]
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        material = raw_material_service.create_raw_material(
            db,
            category_id=category_id,
            name=name,
            unit=unit,
            created_by=user_id
        )
        
        await query.edit_message_text(
            f"‚úÖ –°—ã—Ä—å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üì¶ {material.category.name} / {material.name}\n"
            f"–ï–¥–∏–Ω–∏—Ü–∞: {material.unit.value}\n"
            f"ID: {material.id}",
            reply_markup=get_back_to_settings_button()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—ã—Ä—å—è: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=get_back_to_settings_button()
        )
        context.user_data.clear()
        return ConversationHandler.END
    finally:
        db.close()
