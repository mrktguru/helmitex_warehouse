"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞.
"""
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from app.database.db import init_db
from app.config import TELEGRAM_BOT_TOKEN
from app.database.db import get_db
from app.services import user_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ============= HANDLERS =============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with next(get_db()) as db:
        db_user = user_service.get_or_create_user(
            db=db,
            telegram_id=user.id,
            username=user.username,
            full_name=user.full_name
        )
        is_admin = db_user.is_admin
    
    welcome_text = (
        f"üè≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Helmitex Warehouse, {user.first_name}!\n\n"
        "–°–∏—Å—Ç–µ–º–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/warehouses - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏\n"
        "/skus - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n"
        "/stock - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤\n"
        "/movements - –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
    )
    
    if is_admin:
        welcome_text += "\nüëë –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üè¢ –°–∫–ª–∞–¥—ã:\n"
        "/warehouses - –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤\n\n"
        "üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        "/skus - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "üìä –û—Å—Ç–∞—Ç–∫–∏:\n"
        "/stock - –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n\n"
        "üîÑ –î–≤–∏–∂–µ–Ω–∏—è:\n"
        "/movements - –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π\n\n"
        "üìã –ó–∞–∫–∞–∑—ã:\n"
        "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n\n"
        "‚ÑπÔ∏è –ü—Ä–æ—á–µ–µ:\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
    )
    await update.message.reply_text(help_text)


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    with next(get_db()) as db:
        from app.services import warehouse_service, sku_service
        
        try:
            warehouses_count = len(warehouse_service.get_all_warehouses(db))
            skus_count = len(sku_service.get_all_skus(db))
        except:
            warehouses_count = 0
            skus_count = 0
    
    status_text = (
        "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\n"
        f"üè¢ –°–∫–ª–∞–¥–æ–≤: {warehouses_count}\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {skus_count}\n"
        "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        "ü§ñ –ë–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω"
    )
    await update.message.reply_text(status_text)


async def warehouses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤"""
    with next(get_db()) as db:
        from app.services import warehouse_service
        whs = warehouse_service.get_all_warehouses(db)
    
    if not whs:
        await update.message.reply_text("üì¶ –°–∫–ª–∞–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üè¢ –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤:\n\n"
    for wh in whs:
        text += f"‚Ä¢ {wh.name}"
        if wh.location:
            text += f" ({wh.location})"
        text += "\n"
    
    await update.message.reply_text(text)


async def skus_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    with next(get_db()) as db:
        from app.services import sku_service
        skus = sku_service.get_all_skus(db)
    
    if not skus:
        await update.message.reply_text("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    for sku in skus[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        text += f"‚Ä¢ {sku.code} - {sku.name} ({sku.type.value})\n"
    
    if len(skus) > 20:
        text += f"\n... –∏ –µ—â–µ {len(skus) - 20} —Ç–æ–≤–∞—Ä–æ–≤"
    
    await update.message.reply_text(text)


async def stock_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"""
    await update.message.reply_text("üìä –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def movements_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π"""
    await update.message.reply_text("üîÑ –§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def orders_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    await update.message.reply_text("üìã –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# ============= MAIN =============

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("=" * 80)
    logger.info("–ó–∞–ø—É—Å–∫ Helmitex Warehouse Bot")
    logger.info("=" * 80)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("warehouses", warehouses))
        application.add_handler(CommandHandler("skus", skus_list))
        application.add_handler(CommandHandler("stock", stock_list))
        application.add_handler(CommandHandler("movements", movements_list))
        application.add_handler(CommandHandler("orders", orders_list))

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    main()
