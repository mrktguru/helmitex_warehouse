"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
"""
from typing import List, Any
from datetime import datetime


def format_category_list(categories: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    if not categories:
        return "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["üìÅ *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n"]
    for cat in categories:
        type_emoji = {
            "raw_material": "üåæ",
            "semi_product": "‚öôÔ∏è",
            "finished_product": "üì¶"
        }.get(cat.type.value, "üìÅ")
        
        lines.append(f"{type_emoji} {cat.name}")
    
    return "\n".join(lines)


def format_raw_material_list(materials: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—ã—Ä—å—è."""
    if not materials:
        return "üåæ –°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    lines = ["üåæ *–°—ã—Ä—å–µ –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n"]
    for material in materials:
        stock_emoji = "‚úÖ" if material.stock_quantity > 0 else "‚ö†Ô∏è"
        lines.append(
            f"{stock_emoji} *{material.category.name} / {material.name}*\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {material.stock_quantity:.2f} {material.unit.value}"
        )
    
    return "\n".join(lines)


def format_semi_product_list(products: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤."""
    if not products:
        return "‚öôÔ∏è –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["‚öôÔ∏è *–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n"]
    for product in products:
        stock_emoji = "‚úÖ" if product.stock_quantity > 0 else "‚ö†Ô∏è"
        lines.append(
            f"{stock_emoji} *{product.category.name} / {product.name}*\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {product.stock_quantity:.2f} {product.unit.value}"
        )
    
    return "\n".join(lines)


def format_finished_product_list(products: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    if not products:
        return "üì¶ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    lines = ["üì¶ *–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n"]
    for product in products:
        stock_emoji = "‚úÖ" if product.stock_quantity > 0 else "‚ö†Ô∏è"
        lines.append(
            f"{stock_emoji} *{product.category.name} / {product.name}*\n"
            f"   {product.package_type} {product.package_weight}–∫–≥\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock_quantity)} —à—Ç"
        )
    
    return "\n".join(lines)


def format_recipe_list(recipes: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    if not recipes:
        return "üìã –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["üìã *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã:*\n"]
    for recipe in recipes:
        status_emoji = {
            "draft": "üìù",
            "active": "‚úÖ",
            "archived": "üì¶"
        }.get(recipe.status.value, "‚ùì")
        
        lines.append(
            f"{status_emoji} *{recipe.name}*\n"
            f"   ID: {recipe.id}\n"
            f"   –ü—Ä–æ–¥—É–∫—Ç: {recipe.semi_product.name}\n"
            f"   –í—ã—Ö–æ–¥: {recipe.yield_percent}%\n"
            f"   –°—Ç–∞—Ç—É—Å: {recipe.status.value}"
        )
    
    return "\n".join(lines)


def format_recipe_details(recipe: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞."""
    lines = [
        f"üìã *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞*\n",
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {recipe.name}",
        f"*ID:* {recipe.id}",
        f"*–ü—Ä–æ–¥—É–∫—Ç:* {recipe.semi_product.category.name} / {recipe.semi_product.name}",
        f"*–í—ã—Ö–æ–¥:* {recipe.yield_percent}%",
        f"*–°—Ç–∞—Ç—É—Å:* {recipe.status.value}\n",
        f"*–°–æ—Å—Ç–∞–≤:*"
    ]
    
    for component in recipe.components:
        lines.append(
            f"‚Ä¢ {component.raw_material.category.name} / {component.raw_material.name}: "
            f"{component.percentage:.1f}%"
        )
    
    if recipe.description:
        lines.append(f"\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {recipe.description}")
    
    return "\n".join(lines)


def format_materials_check(check_result: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—ã—Ä—å—è."""
    lines = ["üìä *–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—ã—Ä—å—è:*\n"]
    
    for material in check_result["materials"]:
        status_emoji = "‚úÖ" if material["is_available"] else "‚ùå"
        lines.append(
            f"{status_emoji} *{material['category']} / {material['name']}*\n"
            f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: {material['required']:.2f} {material['unit']}\n"
            f"   –î–æ—Å—Ç—É–ø–Ω–æ: {material['available_stock']:.2f} {material['unit']}"
        )
    
    if check_result["available"]:
        lines.append("\n‚úÖ *–í—Å–µ —Å—ã—Ä—å–µ –≤ –Ω–∞–ª–∏—á–∏–∏, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!*")
    else:
        lines.append("\n‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—ã—Ä—å—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞*")
    
    return "\n".join(lines)


def format_movement_history(movements: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞."""
    if not movements:
        return "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
    
    lines = ["üìä *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"]
    
    for movement in movements:
        date_str = movement.created_at.strftime("%d.%m.%Y %H:%M")
        
        type_emoji = {
            "arrival": "üì•",
            "production": "‚öôÔ∏è",
            "production_output": "‚úÖ",
            "packing": "üì¶",
            "packing_output": "‚úÖ",
            "shipment": "üöö"
        }.get(movement.movement_type.value, "üìä")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
        item_name = ""
        if movement.raw_material:
            item_name = f"{movement.raw_material.category.name} / {movement.raw_material.name}"
        elif movement.semi_product:
            item_name = f"{movement.semi_product.category.name} / {movement.semi_product.name}"
        elif movement.finished_product:
            item_name = f"{movement.finished_product.category.name} / {movement.finished_product.name}"
        
        qty_str = f"{movement.quantity:+.2f}" if movement.quantity < 100 else f"{int(movement.quantity):+d}"
        
        lines.append(
            f"{type_emoji} *{date_str}*\n"
            f"   {item_name}\n"
            f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_str}"
        )
    
    return "\n".join(lines)


def format_date(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É."""
    return dt.strftime("%d.%m.%Y %H:%M")


def format_weight(weight: float, unit: str = "–∫–≥") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å."""
    return f"{weight:.2f} {unit}"


def format_percentage(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç."""
    return f"{value:.1f}%"
