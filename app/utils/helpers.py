"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
from typing import Dict, List, Any


def parse_key_value_lines(text: str) -> Dict[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ" –≤ —Å–ª–æ–≤–∞—Ä—å.
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (–∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
        
    Example:
        >>> parse_key_value_lines("name: John\\nage: 30")
        {'name': 'John', 'age': '30'}
    """
    result = {}
    for line in text.strip().split('\n'):
        line = line.strip()
        if ':' in line:
            key, value = line.split(':', 1)
            result[key.strip()] = value.strip()
    return result


def format_sku_list(skus: List[Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ SKU –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
    
    Args:
        skus: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ SKU
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not skus:
        return "üì¶ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    
    lines = ["üì¶ –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:\n"]
    for sku in skus:
        category = f" ({sku.category.name})" if sku.category else ""
        type_emoji = {
            "raw": "üåæ",
            "semi": "‚öôÔ∏è",
            "finished": "‚úÖ"
        }.get(sku.type.value, "üì¶")
        
        lines.append(
            f"{type_emoji} {sku.code} - {sku.name} [{sku.type.value}]{category}"
        )
    
    return "\n".join(lines)


def format_recipe_list(recipes: List[Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        recipes: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Recipe
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not recipes:
        return "üìã –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n"]
    for recipe in recipes:
        product_name = recipe.semi_sku.name if recipe.semi_sku else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        status_emoji = {
            "draft": "üìù",
            "active": "‚úÖ",
            "archived": "üì¶"
        }.get(recipe.status.value, "‚ùì")
        
        lines.append(
            f"{status_emoji} ID:{recipe.id} - {product_name} "
            f"(–≤—ã—Ö–æ–¥: {recipe.theoretical_yield}%)"
        )
    
    return "\n".join(lines)


def format_category_list(categories: List[Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        categories: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Category
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not categories:
        return "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["üìÅ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"]
    for cat in categories:
        lines.append(f"‚Ä¢ {cat.name}")
    
    return "\n".join(lines)


def format_barrel_list(barrels: List[Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        barrels: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Barrel
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not barrels:
        return "üõ¢Ô∏è –ë–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    lines = ["üõ¢Ô∏è –°–ø–∏—Å–æ–∫ –±–æ—á–µ–∫:\n"]
    for barrel in barrels:
        status_emoji = {
            "clean": "‚ú®",
            "in_process": "‚öôÔ∏è",
            "ready": "‚úÖ",
            "washing": "üßº",
            "archived": "üì¶"
        }.get(barrel.status.value, "‚ùì")
        
        lines.append(f"{status_emoji} {barrel.number} - {barrel.status.value}")
    
    return "\n".join(lines)


def format_weight(weight: float, unit: str = "–∫–≥") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        weight: –í–µ—Å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    return f"{weight:.2f} {unit}"


def format_percentage(value: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    return f"{value:.1f}%"


def validate_percentage_sum(percentages: List[float], tolerance: float = 0.01) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ä–∞–≤–Ω–∞ 100% —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏.
    
    Args:
        percentages: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        tolerance: –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        
    Returns:
        True –µ—Å–ª–∏ —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    """
    total = sum(percentages)
    return abs(total - 100.0) <= tolerance
